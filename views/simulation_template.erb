<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/simulation.css">
  <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/matter-js@0.19.0/build/matter.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.2.4/fabric.min.js"></script>
  
  <style>
    .edit-buttons {
      display: none;
    }
    #matterCanvas {
      pointer-events: auto;
    }
  </style>
</head>


<body>
  <div class="body">
    
    <div class="simulation-area">
      
      <!-- Canvas Area for Matter.js -->
      <div id="canvas-area" style="position: relative; width: 900px; height: 600px;">
        <canvas id="matterCanvas" style="position: absolute; top: 0; left: 0; z-index: 0;" width="800" height="600"></canvas>
        <canvas id="fabricCanvas" style="position: absolute; top: 0; left: 0; z-index: 1;" width="800" height="600"></canvas>
      </div>
      
      <!-- Simulation and Editing Control Buttons -->
      <div class="play_pause">
        <button type="button" id="stopButton"></button>
        <button type="button" id="startButton" style="display:none;"></button>
      </div>
  
      <!-- Buttons for drawing on the canvas -->
      <div class="edit-buttons">
        <div><button type="button" id="drawButton"></button></div>
        <div><button type="button" id="selectButton"></button></button></div>
        <div><button type="button" id="clearButton"></button></div>
        <div><button type="button" id="downloadButton"></button></div>
      </div>
  
    </div>
    
    <div class="form">
      <form id="controls">
        <div class="control">
          <!--ユーザーが調節できる値-->
        </div>
        <div class="control">
          <!--ユーザーが調節できる値-->
        </div>
        <button type="button" id="updateButton">アップデート</button>
      </form>
    </div>
    
    
    <script>
      // 使用モジュール
      const Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Body = Matter.Body,
        Bodies = Matter.Bodies,
        Composite = Matter.Composite,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse;

      // エンジンの生成
      const engine = Engine.create();

      // Canvas 要素の取得
      const matterCanvas = $('#matterCanvas')[0];
      const fabricCanvas = new fabric.Canvas('fabricCanvas');

      // Canvas サイズの設定
      matterCanvas.width = 800;
      matterCanvas.height = 600;
      fabricCanvas.setWidth(800);
      fabricCanvas.setHeight(600);

      // レンダリングの設定
      const render = Render.create({
        canvas: matterCanvas,
        engine: engine,
        options: {
          width: 800,
          height: 600,
          background: '#fafafa',
          wireframes: false
        }
      });

      // Matter.js のマウスと制約の設定
      const mouse = Mouse.create(render.canvas);
      const mouseConstraint = MouseConstraint.create(engine, {
        mouse: mouse,
        constraint: {
          render: { visible: false }
        }
      });

      Composite.add(engine.world, mouseConstraint);
      render.mouse = mouse;

      // Matter.js のレンダリングを開始
      Render.run(render);
      const runner = Runner.create();
      Runner.run(runner, engine);

      // 床と壁の追加
      const ground = Bodies.rectangle(400, 600, 800, 20, { isStatic: true });
      const leftWall = Bodies.rectangle(0, 300, 20, 600, { isStatic: true });
      const rightWall = Bodies.rectangle(800, 300, 20, 600, { isStatic: true });
      const roof = Bodies.rectangle(400, 0, 800, 20, { isStatic: true });
      Composite.add(engine.world, [ground, leftWall, rightWall, roof]);
      
      
      
      
      
      

    //  必要なコード


      $(document).ready(function() {
          // ページの読み込み時にすべてのキャンバスとそのコンテナをゼロにする
          $('.canvas-container, #fabricCanvas, .upper-canvas').css({
              'width': '0',
              'height': '0'
          });
          $('#fabricCanvas').css('pointer-events', 'none');
      });
      
      $('#startButton').on('click', function() {
          Runner.run(runner, engine);
          $(this).hide();
          $('#stopButton').show();
      
          // Fabric.js canvas, upper-canvas とその親要素 (canvas-container) の幅と高さを0に
          $('.canvas-container, #fabricCanvas, .upper-canvas').css({
              'width': '0',
              'height': '0'
          });
          $('#fabricCanvas').css('pointer-events', 'none');
          $('#matterCanvas').css('pointer-events', 'auto');
          $('#matterCanvas').css('z-index', 1);
          $('.edit-buttons').hide();
      
          // Drawing モードを無効化
          fabricCanvas.isDrawingMode = false;
      
          // マウス制約を再追加
          render.mouse = mouse;
          mouseConstraint.mouse.element.removeEventListener("mousemove", mouseConstraint.mouse.mousemove);
          mouseConstraint.mouse.element.addEventListener("mousemove", mouseConstraint.mouse.mousemove);
      });
      
      $('#stopButton').on('click', function() {
          Runner.stop(runner);
          $(this).hide();
          $('#startButton').show();
      
          // Fabric.js canvas, upper-canvas とその親要素 (canvas-container) の幅と高さを元に戻す
          $('.canvas-container, #fabricCanvas, .upper-canvas').css({
              'width': '800px',
              'height': '600px'
          });
          $('#fabricCanvas').css('pointer-events', 'auto');
          $('#matterCanvas').css('pointer-events', 'none');
          $('#fabricCanvas').css('z-index', 1);
          $('.edit-buttons').show();
      
      });
      
      // 描くボタンが押されたときの処理
      document.getElementById("drawButton").addEventListener("click", function () {
          fabricCanvas.isDrawingMode = true;  // 描画モードをオンに
          fabricCanvas.freeDrawingBrush.width = 5;  // ブラシのサイズ
          fabricCanvas.freeDrawingBrush.color = "black";  // ブラシの色
      });
      
      // 新しく追加した選択ボタンが押されたときの処理
      document.getElementById("selectButton").addEventListener("click", function () {
          fabricCanvas.isDrawingMode = false;  // 描画モードをオフにして選択モードへ
      });
      
      // 描画をクリアするボタンの処理
      document.getElementById("clearButton").addEventListener("click", function () {
          fabricCanvas.clear();  // Fabric.js のキャンバスをクリア
      });
      
      document.getElementById("downloadButton").addEventListener("click", function () {
        const combinedCanvas = document.createElement('canvas');
        combinedCanvas.width = fabricCanvas.width;
        combinedCanvas.height = fabricCanvas.height;
      
        const combinedContext = combinedCanvas.getContext('2d');
        const matterContext = matterCanvas.getContext('2d');
      
        // Matter.js の canvas を描画
        combinedContext.drawImage(matterCanvas, 0, 0);
      
        // Fabric.js の canvas を描画
        fabricCanvas.renderAll();
        const fabricImage = fabricCanvas.toCanvasElement();
        combinedContext.drawImage(fabricImage, 0, 0);
      
        const link = document.createElement('a');
        link.href = combinedCanvas.toDataURL('image/png');
        link.download = 'visphys.png';
        link.click();
      });


    </script>
  </div>
</body>
</html>