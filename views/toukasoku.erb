<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/simulation.css">
</head>

<body>
  <div class="body">
    <div class="simulation-area">
      <!-- Canvas Area for Matter.js -->
      <div id="canvas-area" style="position: relative; width: 900px; height: 600px;">
        <canvas id="matterCanvas" style="position: absolute; top: 0; left: 0; z-index: 0;" width="800" height="600"></canvas>
        <canvas id="fabricCanvas" style="position: absolute; top: 0; left: 0; z-index: 1;" width="800" height="600"></canvas>
      </div>
      
      <!-- Simulation and Editing Control Buttons -->
      <div class="play_pause">
        <button type="button" id="stopButton"></button>
        <button type="button" id="startButton" style="display:none;"></button>
      </div>
  
      <!-- Buttons for drawing on the canvas -->
      <div class="edit-buttons">
        <div><button type="button" id="drawButton"></button></div>
        <div><button type="button" id="selectButton"></button></div>
        <div><button type="button" id="clearButton"></button></div>
        <div><button type="button" id="downloadButton"></button></div>
      </div>
    </div>
    
    <div class="form">
      <form id="controls">
        <div class="control">
          <label for="speed">運動の初速</label>
          <input type="number" id="speed" name="speed" value="5" min="0" max="90">
        </div>
        <div class="control">
          <label for="acceleration">加速度</label>
          <input type="number" id="acceleration" name="acceleration" value="1" step="0.1">
        </div>
        <div class="control">
          <label for="direction">速度の向き</label>
          <select id="direction" name="direction">
            <option value="right" selected>右</option>
            <option value="left">左</option>
          </select>
        </div>
        <div class="control">
          <label for="mass">物体の質量</label>
          <input type="number" id="mass" name="mass" value="1" min="0.1" step="0.1">
        </div>
        <div class="control">
          <label>物体の形</label>
          <input type="radio" id="rectangle" name="shape" value="rectangle" checked>
          <label class="shape" for="rectangle">直方体</label>
          <input type="radio" id="circle" name="shape" value="circle">
          <label class="shape" for="circle">球</label>
        </div>
        <button type="button" id="updateButton">アップデート</button>
      </form>
    </div>

    <form id="saveSimulationForm" method="POST" action="/saveSimulation">
      <button type="submit" class="saveButton"></button>
      <input type="text" name="title" placeholder="タイトル" required>
      <input type="hidden" name="simulation_type" value="toukasoku"> <!-- シミュレーション種類 -->
      <input type="hidden" name="variables" id="variablesInput"> <!-- 変数をここに入れる -->
    </form>
    
    <form id="shareSimulationForm" method="POST" action="/shareSimulation">
      <button type="submit" class="shareButton"></button>
      <input type="hidden" name="simulation_type" value="toukasoku"> 
      <input type="hidden" name="variables" id="shareVariablesInput">
    </form>
    
    <script>
      const Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Body = Matter.Body,
        Bodies = Matter.Bodies,
        Composite = Matter.Composite,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse,
        Events = Matter.Events;

      const engine = Engine.create();
      const matterCanvas = $('#matterCanvas')[0];
      const fabricCanvas = new fabric.Canvas('fabricCanvas');

      matterCanvas.width = 800;
      matterCanvas.height = 600;
      fabricCanvas.setWidth(800);
      fabricCanvas.setHeight(600);

      const render = Render.create({
        canvas: matterCanvas,
        engine: engine,
        options: {
          width: 800,
          height: 600,
          background: '#fafafa',
          wireframes: false
        }
      });

      const mouse = Mouse.create(render.canvas);
      const mouseConstraint = MouseConstraint.create(engine, {
        mouse: mouse,
        constraint: {
          render: { visible: false }
        }
      });

      Composite.add(engine.world, mouseConstraint);
      render.mouse = mouse;

      Render.run(render);
      const runner = Runner.create();
      Runner.run(runner, engine);

      const ground = Bodies.rectangle(400, 600, 800, 20, { isStatic: true });
      const leftWall = Bodies.rectangle(0, 300, 20, 600, { isStatic: true });
      const rightWall = Bodies.rectangle(800, 300, 20, 600, { isStatic: true });
      const roof = Bodies.rectangle(400, 0, 800, 20, { isStatic: true });
      Composite.add(engine.world, [ground, leftWall, rightWall, roof]);

      let shape;
      let acceleration = 0;
      let currentSpeed = 0;
      let interval;

      function createShape(type, mass) {
        if (type === 'circle') {
          return Bodies.circle(300, 565, 25, { mass: mass, friction: 0, restitution: 0 });
        } else if (type === 'rectangle') {
          return Bodies.rectangle(300, 565, 90, 50, { mass: mass, friction: 0, restitution: 0 });
        }
      }

      function startMotion(speed, direction) {
        let velocity = { x: 0, y: 0 };
        
        switch (direction) {
          case 'right':
            velocity.x = speed;
            break;
          case 'left':
            velocity.x = -speed;
            break;
        }

        Body.setVelocity(shape, velocity);
        Body.set(shape, { frictionAir: 0 });

        // 定期的に加速度を適用
        clearInterval(interval);
        currentSpeed = speed; // 現在の速度を初期化

        interval = setInterval(() => {
          currentSpeed += acceleration / 60; // フレームごとに加速度を加算
          Body.setVelocity(shape, { x: currentSpeed * (direction === 'left' ? -1 : 1), y: 0 });
        }, 1000 / 60); // 60 FPS
      }

      $(document).ready(function() {
        $('.canvas-container, #fabricCanvas, .upper-canvas').css({
          'width': '0',
          'height': '0'
        });
        $('#fabricCanvas').css('pointer-events', 'none');

        
        let savedVariables = <%= @variables ? JSON.parse(@variables.to_json) : 'null' %>;

        if (savedVariables) {
          $('#speed').val(savedVariables.speed || 5);
          $('#acceleration').val(savedVariables.acceleration || 1);
          $('#direction').val(savedVariables.direction || 'right');
          $('#mass').val(savedVariables.mass || 1);
          $('input[name="shape"][value="' + (savedVariables.shape || 'rectangle') + '"]').prop('checked', true);

          const mass = parseFloat(savedVariables.mass || 1);
          const shapeType = savedVariables.shape || 'rectangle';
          shape = createShape(shapeType, mass);
          Composite.add(engine.world, shape);
          
          const speed = parseFloat(savedVariables.speed || 5);
          acceleration = parseFloat(savedVariables.acceleration || 1);
          const direction = savedVariables.direction || 'right';

          startMotion(speed, direction);
        } else {
          // デフォルト値を設定
          $('#speed').val(5);
          $('#acceleration').val(1);
          $('#direction').val('right');
          $('#mass').val(1);
          $('input[name="shape"][value="rectangle"]').prop('checked', true);

          shape = createShape('rectangle', 1);
          Composite.add(engine.world, shape);

          startMotion(5, 'right');
        }

        // フォーム送信処理
        $('#saveSimulationForm').on('submit', function(e) {
          e.preventDefault();

          const variables = {
            speed: $('#speed').val(),
            acceleration: $('#acceleration').val(),
            direction: $('#direction').val(),
            mass: $('#mass').val(),
            shape: $('input[name="shape"]:checked').val(),
          };

          $('#variablesInput').val(JSON.stringify(variables));
          this.submit();
        });

        Events.on(mouseConstraint, 'enddrag', function(event) {
          const speed = parseFloat($('#speed').val());
          const direction = $('#direction').val();
          acceleration = parseFloat($('#acceleration').val());

          if (event.body) {
            Body.setVelocity(event.body, { x: 0, y: 0 });
            Body.set(event.body, { frictionAir: 0 });

            clearInterval(interval);
            currentSpeed = speed;

            interval = setInterval(() => {
              currentSpeed += acceleration / 60;
              Body.setVelocity(event.body, { x: currentSpeed * (direction === 'left' ? -1 : 1), y: 0 });
            }, 1000 / 60);
          }
        });
      });
      
      $('#shareSimulationForm').on('submit', function(e) {
          e.preventDefault();

          const variables = {
            speed: $('#speed').val(),
            acceleration: $('#acceleration').val(),
            direction: $('#direction').val(),
            mass: $('#mass').val(),
            shape: $('input[name="shape"]:checked').val(),
          };

          $('#shareVariablesInput').val(JSON.stringify(variables));

        // フォームを送信してシェアリンクを生成
        $.post('/shareSimulation', $(this).serialize(), function(data) {
            // サーバーから返されたシェアリンクを取得
            const shareLink = data.share_link;  
    
            // シェアリンクをクリップボードにコピー
            navigator.clipboard.writeText(shareLink).then(() => {
                alert('リンクがクリップボードにコピーされました');
            }).catch(err => {
                console.error('コピーに失敗しました: ', err);
            });
        }, 'json');
        });

      $('#updateButton').on('click', function() {
        const mass = parseFloat($('#mass').val());
        const shapeType = $('input[name="shape"]:checked').val();
        
        Composite.remove(engine.world, shape, true);
        shape = createShape(shapeType, mass);
        Composite.add(engine.world, shape);

        const speed = parseFloat($('#speed').val());
        acceleration = parseFloat($('#acceleration').val());
        const direction = $('#direction').val();
        startMotion(speed, direction);
      });

      $('#startButton').on('click', function() {
        Runner.run(runner, engine);
        $(this).hide();
        $('#stopButton').show();
        $('.canvas-container, #fabricCanvas, .upper-canvas').css({'width': '0', 'height': '0'});
        $('#fabricCanvas').css('pointer-events', 'none');
        $('#matterCanvas').css('pointer-events', 'auto');
        $('#matterCanvas').css('z-index', 1);
        $('.edit-buttons').hide();
        fabricCanvas.isDrawingMode = false;
        render.mouse = mouse;
        mouseConstraint.mouse.element.removeEventListener("mousemove", mouseConstraint.mouse.mousemove);
        mouseConstraint.mouse.element.addEventListener("mousemove", mouseConstraint.mouse.mousemove);
      });

      $('#stopButton').on('click', function() {
        Runner.stop(runner);
        clearInterval(interval); // インターバルをクリア
        $(this).hide();
        $('#startButton').show();
        $('.canvas-container, #fabricCanvas, .upper-canvas').css({'width': '800px', 'height': '600px'});
        $('#fabricCanvas').css('pointer-events', 'auto');
        $('#matterCanvas').css('pointer-events', 'none');
        $('#fabricCanvas').css('z-index', 1);
        $('.edit-buttons').show();
      });

      document.getElementById("drawButton").addEventListener("click", function () {
        fabricCanvas.isDrawingMode = true;
        fabricCanvas.freeDrawingBrush.width = 5;
        fabricCanvas.freeDrawingBrush.color = "black";
      });
      
      document.getElementById("selectButton").addEventListener("click", function () {
        fabricCanvas.isDrawingMode = false;
      });

      document.getElementById("clearButton").addEventListener("click", function () {
        fabricCanvas.clear();
        ws.send(JSON.stringify({type: 'clear'}));
      });

      document.getElementById("downloadButton").addEventListener("click", function () {
        const dataURL = fabricCanvas.toDataURL({format: 'png'});
        const link = document.createElement('a');
        link.href = dataURL;
        link.download = 'canvas.png';
        link.click();
      });
      
      //WebSocketを使ってキャンバスをリアルタイムで反映
      //WebSocketの接続
      const ws = new WebSocket('wss://' + window.location.host + '/ws/<%= @token %>'); //サーバーのWebSocketエンドポイント
      
      let isWsConnected = false;
      
      document.addEventListener("DOMContentLoaded", function () {
          
          ws.onopen = () => {
              console.log('WebSocket connection established');
              isWsConnected = true;
          };
      })
      
      //受信時
      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        if (data.type === 'draw') {
          fabric.util.enlivenObjects([data.data], function(objects) {
            objects.forEach(obj => {
              fabricCanvas.add(obj);
            });
          });
        } else if (data.type === 'clear') {
          fabricCanvas.clear();
        }
      };
      
      //線が書かれた時のイベント
      fabricCanvas.on('path:created', function(event) {
        const pathData = event.path.toJSON(); //描画データをJSON形式に
        //WebSocket接続が確立されているか確認してから送信
        if (isWsConnected) {
          ws.send(JSON.stringify({ type: 'draw', data: pathData}));
        } else {
          console.warn("WebSocket connection is not open. Mesage not sent.");
        }
      });
    </script>
  </div>
</body>
</html>