<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/simulation.css">
</head>

<body>
  <div class="body">
    
    <div class="simulation-area">
      <div id="canvas-area" style="position: relative; width: 900px; height: 600px;">
        <canvas id="matterCanvas" style="position: absolute; top: 0; left: 0; z-index: 0;" width="800" height="600"></canvas>
        <canvas id="fabricCanvas" style="position: absolute; top: 0; left: 0; z-index: 1;" width="800" height="600"></canvas>
      </div>
      
      <div class="play_pause">
        <button type="button" id="stopButton"></button>
        <button type="button" id="startButton" style="display:none;"></button>
      </div>
  
      <div class="edit-buttons">
        <div><button type="button" id="drawButton"></button></div>
        <div><button type="button" id="selectButton"></button></div>
        <div><button type="button" id="clearButton"></button></div>
        <div><button type="button" id="downloadButton"></button></div>
      </div>
  
    </div>
    
    <div class="form">
      <form id="controls">
        <div class="control">
          <label for="amplitude">振幅</label>
          <input type="number" id="amplitude" name="amplitude" min="10" value="<%= @variables ? @variables['amplitude'] || 100 : 100 %>">
        </div>
        <div class="control">
          <label for="angularFrequency">角振動数</label>
          <input type="number" id="angularFrequency" name="angularFrequency" min="0" value="<%= @variables ? @variables['angularFrequency'] || 1 : 1 %>">
        </div>
        <button type="button" id="updateButton">アップデート</button>
      </form>
    </div>
    
    <form id="saveSimulationForm" method="POST" action="/saveSimulation">
      <button type="submit" class="saveButton"></button>
      <input type="text" name="title" placeholder="タイトル" required>
      <input type="hidden" name="simulation_type" value="tansindou"> <!-- シミュレーション種類 -->
      <input type="hidden" name="variables" id="variablesInput"> <!-- 変数をここに入れる -->
    </form>
    
    <form id="shareSimulationForm" method="POST" action="/shareSimulation">
      <button type="submit" class="shareButton"></button>
      <input type="hidden" name="simulation_type" value="tansindou"> 
      <input type="hidden" name="variables" id="shareVariablesInput">
    </form>
    
    <script>
    // 使用モジュール
      const Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Body = Matter.Body,
        Bodies = Matter.Bodies,
        Composite = Matter.Composite,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse;

      // エンジンの生成
      const engine = Engine.create();

      // Canvas 要素の取得
      const matterCanvas = $('#matterCanvas')[0];
      const fabricCanvas = new fabric.Canvas('fabricCanvas');

      // Canvas サイズの設定
      matterCanvas.width = 800;
      matterCanvas.height = 600;
      fabricCanvas.setWidth(800);
      fabricCanvas.setHeight(600);

      // レンダリングの設定
      const render = Render.create({
        canvas: matterCanvas,
        engine: engine,
        options: {
          width: 800,
          height: 600,
          background: '#fafafa',
          wireframes: false
        }
      });

      // Matter.js のマウスと制約の設定
      const mouse = Mouse.create(render.canvas);
      const mouseConstraint = MouseConstraint.create(engine, {
        mouse: mouse,
        constraint: {
          render: { visible: false }
        }
      });

      Composite.add(engine.world, mouseConstraint);
      render.mouse = mouse;

      // Matter.js のレンダリングを開始
      Render.run(render);
      const runner = Runner.create();
      Runner.run(runner, engine);

      // 床と壁の追加
      const ground = Bodies.rectangle(400, 600, 800, 20, { isStatic: true });
      const leftWall = Bodies.rectangle(0, 300, 20, 600, { isStatic: true });
      const rightWall = Bodies.rectangle(800, 300, 20, 600, { isStatic: true });
      const roof = Bodies.rectangle(400, 0, 800, 20, { isStatic: true });
      Composite.add(engine.world, [ground, leftWall, rightWall, roof]);

      let oscillatingBody; // 単振動の物体

    function startSimpleHarmonicMotion(amplitude, angularFrequency) {
        // 中心位置を設定
        const centerX = 400;
        const centerY = 300;
    
        // 初期位置を設定
        let time = 0;
    
        // 単振動を作成
        oscillatingBody = Bodies.circle(centerX, centerY, 20, {
            restitution: 0.9,
            friction: 0.1,
        });
        Composite.add(engine.world, oscillatingBody);
    
        // 更新関数を設定
        Matter.Events.on(engine, 'beforeUpdate', function() {
            time += 1 / 60; // 時間の進行
            Body.setPosition(oscillatingBody, {
                x: centerX,
                y: centerY + amplitude * Math.sin(angularFrequency * time)
            });
        });
    }
    
     $('#updateButton').on('click', function() {
        const amplitude = parseFloat($('#amplitude').val());
        const angularFrequency = parseFloat($('#angularFrequency').val());

        // 既存の物体を消去（単振動の物体だけ）
        if (oscillatingBody) {
            Composite.remove(engine.world, oscillatingBody);
            oscillatingBody = null; // リセット
        }
    
        // 単振動を開始
        startSimpleHarmonicMotion(amplitude, angularFrequency);
    });

      $(document).ready(function() {
          // ページの読み込み時にすべてのキャンバスとそのコンテナをゼロにする
          $('.canvas-container, #fabricCanvas, .upper-canvas').css({
              'width': '0',
              'height': '0'
          });
          $('#fabricCanvas').css('pointer-events', 'none');
          
          const variables = <%= @variables ? JSON.parse(@variables.to_json) : {} %>;
          const amplitude = variables.amplitude || 100;
          const angularFrequency = variables.angularFrequency || 1;

          // フォームの初期値をセット
          $('#amplitude').val(amplitude);
          $('#angularFrequency').val(angularFrequency);
          
          startSimpleHarmonicMotion(amplitude, angularFrequency);
          
          // フォーム送信処理
          $('#saveSimulationForm').on('submit', function(e) {
              e.preventDefault();
      
              // ユーザーが入力した値を取得してオブジェクトにまとめる
              const variables = {
                  amplitude: $('#amplitude').val(),
                  angularFrequency: $('#angularFrequency').val(),
              };
      
              // 変数オブジェクトをJSON形式に変換してhiddenフィールドに設定
              $('#variablesInput').val(JSON.stringify(variables));
      
              // フォームを送信
              this.submit();
          });
      });
      
      $('#shareSimulationForm').on('submit', function(e) {
          e.preventDefault();
  
          // ユーザーが入力した値を取得してオブジェクトにまとめる
          const variables = {
              amplitude: $('#amplitude').val(),
              angularFrequency: $('#angularFrequency').val(),
          };
  
          // 変数オブジェクトをJSON形式に変換してhiddenフィールドに設定
          $('#shareVariablesInput').val(JSON.stringify(variables));
  
        // フォームを送信してシェアリンクを生成
        $.post('/shareSimulation', $(this).serialize(), function(data) {
            // サーバーから返されたシェアリンクを取得
            const shareLink = data.share_link;  
    
            // シェアリンクをクリップボードにコピー
            navigator.clipboard.writeText(shareLink).then(() => {
                alert('リンクがクリップボードにコピーされました');
            }).catch(err => {
                console.error('コピーに失敗しました: ', err);
            });
        }, 'json');
      });
      
      
      $('#stopButton').on('click', function() {
          Runner.stop(runner);
          $(this).hide();
          $('#startButton').show();
      
          // Fabric.js canvas, upper-canvas とその親要素 (canvas-container) の幅と高さを元に戻す
          $('.canvas-container, #fabricCanvas, .upper-canvas').css({
              'width': '800px',
              'height': '600px'
          });
          $('#fabricCanvas').css('pointer-events', 'auto');
          $('#matterCanvas').css('pointer-events', 'none');
          $('#fabricCanvas').css('z-index', 1);
          $('.edit-buttons').show();
      
      });
      
      // 描くボタンが押されたときの処理
      document.getElementById("drawButton").addEventListener("click", function () {
          fabricCanvas.isDrawingMode = true;  // 描画モードをオンに
          fabricCanvas.freeDrawingBrush.width = 5;  // ブラシのサイズ
          fabricCanvas.freeDrawingBrush.color = "black";  // ブラシの色
      });
      
      // 新しく追加した選択ボタンが押されたときの処理
      document.getElementById("selectButton").addEventListener("click", function () {
          fabricCanvas.isDrawingMode = false;  // 描画モードをオフにして選択モードへ
      });
      
      // 描画をクリアするボタンの処理
      document.getElementById("clearButton").addEventListener("click", function () {
          fabricCanvas.clear();  // Fabric.js のキャンバスをクリア
          ws.send(JSON.stringify({type: 'clear'}));
      });
      
      document.getElementById("downloadButton").addEventListener("click", function () {
        const combinedCanvas = document.createElement('canvas');
        combinedCanvas.width = fabricCanvas.width;
        combinedCanvas.height = fabricCanvas.height;
      
        const combinedContext = combinedCanvas.getContext('2d');
        const matterContext = matterCanvas.getContext('2d');
      
        // Matter.js の canvas を描画
        combinedContext.drawImage(matterCanvas, 0, 0);
      
        // Fabric.js の canvas を描画
        fabricCanvas.renderAll();
        const fabricImage = fabricCanvas.toCanvasElement();
        combinedContext.drawImage(fabricImage, 0, 0);
      
        const link = document.createElement('a');
        link.href = combinedCanvas.toDataURL('image/png');
        link.download = 'visphys.png';
        link.click();
      });
      
      //WebSocketを使ってキャンバスをリアルタイムで反映
      //WebSocketの接続
      const ws = new WebSocket('wss://' + window.location.host + '/ws/<%= @token %>'); //サーバーのWebSocketエンドポイント
      
      let isWsConnected = false;
      
      document.addEventListener("DOMContentLoaded", function () {
          
          ws.onopen = () => {
              console.log('WebSocket connection established');
              isWsConnected = true;
          };
      })
      
      //受信時
      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        if (data.type === 'draw') {
          fabric.util.enlivenObjects([data.data], function(objects) {
            objects.forEach(obj => {
              fabricCanvas.add(obj);
            });
          });
        } else if (data.type === 'clear') {
          fabricCanvas.clear();
        }
      };
      
      //線が書かれた時のイベント
      fabricCanvas.on('path:created', function(event) {
        const pathData = event.path.toJSON(); //描画データをJSON形式に
        //WebSocket接続が確立されているか確認してから送信
        if (isWsConnected) {
          ws.send(JSON.stringify({ type: 'draw', data: pathData}));
        } else {
          console.warn("WebSocket connection is not open. Mesage not sent.");
        }
      });

    </script>
  </div>
</body>
</html>