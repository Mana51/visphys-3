<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/simulation.css">
</head>

<body>
  <div class="body">
    <div class="simulation-area">
      <div id="canvas-area" style="position: relative; width: 900px; height: 600px;">
        <canvas id="matterCanvas" style="position: absolute; top: 0; left: 0; z-index: 0;" width="800" height="600"></canvas>
        <canvas id="fabricCanvas" style="position: absolute; top: 0; left: 0; z-index: 1;" width="800" height="600"></canvas>
      </div>

      <div class="play_pause">
        <button type="button" id="stopButton"></button>
        <button type="button" id="startButton" style="display:none;"></button>
      </div>

      <div class="edit-buttons">
        <div><button type="button" id="drawButton"></button></div>
        <div><button type="button" id="selectButton"></button></div>
        <div><button type="button" id="clearButton"></button></div>
        <div><button type="button" id="downloadButton"></button></div>
      </div>
    </div>

    <div class="form">
      <form id="controls">
        <div class="control">
          <label for="speed1">物体1の速度（右向き）</label>
          <input type="number" id="speed1" name="speed1" value="<%= @variables ? @variables['speed1'] || 5 : 5 %>" min="0" max="90">
        </div>
        <div class="control">
          <label for="mass1">物体1の質量</label>
          <input type="number" id="mass1" name="mass1" value="<%= @variables ? @variables['mass1'] || 1 : 1 %>" min="0.1" step="0.1">
        </div>
        <div class="control">
          <label for="speed2">物体2の速度（左向き）</label>
          <input type="number" id="speed2" name="speed2" value="<%= @variables ? @variables['speed2'] || 5 : 5 %>" min="0" max="90">
        </div>
        <div class="control">
          <label for="mass2">物体2の質量</label>
          <input type="number" id="mass2" name="mass2" value="<%= @variables ? @variables['mass2'] || 1 : 1 %>" min="0.1" step="0.1">
        </div>
        <div class="control">
          <label for="restitution">反発係数</label>
          <input type="number" id="restitution" name="restitution" value="<%= @variables ? @variables['restitution'] || 1 : 1 %>" min="0" step="0.1">
        </div>
        <div class="control">
          <label>物体の形</label>
          <input type="radio" id="rectangle" name="shape" value="rectangle" <%= (@variables.nil? || @variables['shape'] == 'rectangle') ? 'checked' : '' %>>
          <label class="shape" for="rectangle">直方体</label>
          <input type="radio" id="circle" name="shape" value="circle" <%= (@variables && @variables['shape'] == 'circle') ? 'checked' : '' %>>
          <label class="shape" for="circle">球</label>
        </div>
        <button type="button" id="updateButton">アップデート</button>
      </form>
    </div>

    <form id="saveSimulationForm" method="POST" action="/saveSimulation">
      <button type="submit" class="saveButton"></button>
      <input type="text" name="title" placeholder="タイトル" required>
      <input type="hidden" name="simulation_type" value="syoutotu_1d"> 
      <input type="hidden" name="variables" id="variablesInput">
    </form>
    
    <form id="shareSimulationForm" method="POST" action="/shareSimulation">
      <button type="submit" class="shareButton"></button>
      <input type="hidden" name="simulation_type" value="syoutotu_1d"> 
      <input type="hidden" name="variables" id="shareVariablesInput">
    </form>


<script>
  const Engine = Matter.Engine,
    Render = Matter.Render,
    Runner = Matter.Runner,
    Body = Matter.Body,
    Bodies = Matter.Bodies,
    Composite = Matter.Composite,
    MouseConstraint = Matter.MouseConstraint,
    Mouse = Matter.Mouse;

  const engine = Engine.create();
  const matterCanvas = $('#matterCanvas')[0];
  const fabricCanvas = new fabric.Canvas('fabricCanvas');

  matterCanvas.width = 800;
  matterCanvas.height = 600;
  fabricCanvas.setWidth(800);
  fabricCanvas.setHeight(600);

  const render = Render.create({
    canvas: matterCanvas,
    engine: engine,
    options: {
      width: 800,
      height: 600,
      background: '#fafafa',
      wireframes: false
    }
  });

  const mouse = Mouse.create(render.canvas);
  const mouseConstraint = MouseConstraint.create(engine, {
    mouse: mouse,
    constraint: {
      render: { visible: false }
    }
  });

  Composite.add(engine.world, mouseConstraint);
  render.mouse = mouse;

  Render.run(render);
  const runner = Runner.create();
  Runner.run(runner, engine);

  const ground = Bodies.rectangle(400, 600, 800, 20, { isStatic: true, friction: 0 });
  const leftWall = Bodies.rectangle(0, 300, 20, 600, { isStatic: true });
  const rightWall = Bodies.rectangle(800, 300, 20, 600, { isStatic: true });
  const roof = Bodies.rectangle(400, 0, 800, 20, { isStatic: true });
  Composite.add(engine.world, [ground, leftWall, rightWall, roof]);

  let shape1, shape2;

  function createShape(mass, position) {
    const shapeType = $('input[name="shape"]:checked').val();
    return shapeType === 'rectangle'
      ? Bodies.rectangle(position, 300, 50, 50, { mass: mass, friction: 0, restitution: parseFloat($('#restitution').val()) })
      : Bodies.circle(position, 300, 25, { mass: mass, friction: 0, restitution: parseFloat($('#restitution').val()) });
  }

  function resetShapes() {
    if (shape1) Composite.remove(engine.world, shape1);
    if (shape2) Composite.remove(engine.world, shape2);

    const mass1 = parseFloat(document.getElementById('mass1').value);
    const mass2 = parseFloat(document.getElementById('mass2').value);

    shape1 = createShape(mass1, 400);
    Body.setPosition(shape1, { x: 300, y: 565 });
    shape2 = createShape(mass2, 500);
    Body.setPosition(shape2, { x: 500, y: 565 });

    Composite.add(engine.world, [shape1, shape2]);
    setInitialVelocities();
  }

  function setInitialVelocities() {
    Body.setVelocity(shape1, { x: parseFloat($('#speed1').val()), y: 0 });
    Body.setVelocity(shape2, { x: -parseFloat($('#speed2').val()), y: 0 });
  }

  $('#updateButton').on('click', resetShapes);

  $(document).ready(function() {
    $('.canvas-container, #fabricCanvas, .upper-canvas').css({
      'width': '0',
      'height': '0'
    });
    $('#fabricCanvas').css('pointer-events', 'none');

    if (<%= @variables ? 'true' : 'false' %>) {
      const savedVariables = JSON.parse(<%= @variables.to_json %>);
      $('#speed1').val(savedVariables.speed1 || 5);
      $('#mass1').val(savedVariables.mass1 || 1);
      $('#speed2').val(savedVariables.speed2 || 5);
      $('#mass2').val(savedVariables.mass2 || 1);
      $('#restitution').val(savedVariables.restitution || 1);
      $('input[name="shape"][value="' + (savedVariables.shape || 'rectangle') + '"]').prop('checked', true);

      resetShapes();
    } else {
      resetShapes();
    }

    $('#saveSimulationForm').on('submit', function(e) {
      e.preventDefault();

      const variables = {
        speed1: $('#speed1').val(),
        mass1: $('#mass1').val(),
        speed2: $('#speed2').val(),
        mass2: $('#mass2').val(),
        restitution: $('#restitution').val(),
        shape: $('input[name="shape"]:checked').val(),
      };

      $('#variablesInput').val(JSON.stringify(variables));
      this.submit();
    });
  });
  
  $('#shareSimulationForm').on('submit', function(e) {
    e.preventDefault();
  
    const variables = {
      speed1: $('#speed1').val(),
      mass1: $('#mass1').val(),
      speed2: $('#speed2').val(),
      mass2: $('#mass2').val(),
      restitution: $('#restitution').val(),
      shape: $('input[name="shape"]:checked').val(),
    };
  
    $('#shareVariablesInput').val(JSON.stringify(variables));


    // フォームを送信してシェアリンクを生成
    $.post('/shareSimulation', $(this).serialize(), function(data) {
        // サーバーから返されたシェアリンクを取得
        const shareLink = data.share_link;  

        // シェアリンクをクリップボードにコピー
        navigator.clipboard.writeText(shareLink).then(() => {
            alert('リンクがクリップボードにコピーされました');
        }).catch(err => {
            console.error('コピーに失敗しました: ', err);
        });
    }, 'json');
  });


  $('#startButton').on('click', function() {
    Runner.start(runner, engine);
    $(this).hide();
    $('#stopButton').show();

    $('.canvas-container, #fabricCanvas, .upper-canvas').css({
      'width': '0',
      'height': '0'
    });
    $('#fabricCanvas').css('pointer-events', 'none');
    $('#matterCanvas').css('pointer-events', 'auto');
    $('#matterCanvas').css('z-index', 1);
    $('.edit-buttons').hide();

    fabricCanvas.isDrawingMode = false;

    render.mouse = mouse;
    mouseConstraint.mouse.element.removeEventListener("mousemove", mouseConstraint.mouse.mousemove);
    mouseConstraint.mouse.element.addEventListener("mousemove", mouseConstraint.mouse.mousemove);
  });

  $('#stopButton').on('click', function() {
    Runner.stop(runner);
    $(this).hide();
    $('#startButton').show();

    $('.canvas-container, #fabricCanvas, .upper-canvas').css({
      'width': '800px',
      'height': '600px'
    });
    $('#fabricCanvas').css('pointer-events', 'auto');
    $('#matterCanvas').css('pointer-events', 'none');
    $('#fabricCanvas').css('z-index', 1);
    $('.edit-buttons').show();
  });

  document.getElementById("drawButton").addEventListener("click", function () {
    fabricCanvas.isDrawingMode = true;
    fabricCanvas.freeDrawingBrush.width = 5;
    fabricCanvas.freeDrawingBrush.color = "black";
  });

  document.getElementById("selectButton").addEventListener("click", function () {
    fabricCanvas.isDrawingMode = false;
  });

  document.getElementById("clearButton").addEventListener("click", function () {
    fabricCanvas.clear();
    ws.send(JSON.stringify({type: 'clear'}));
  });

  document.getElementById("downloadButton").addEventListener("click", function () {
    const combinedCanvas = document.createElement('canvas');
    combinedCanvas.width = fabricCanvas.width;
    combinedCanvas.height = fabricCanvas.height;

    const combinedContext = combinedCanvas.getContext('2d');
    const matterContext = matterCanvas.getContext('2d');

    combinedContext.drawImage(matterCanvas, 0, 0);
    fabricCanvas.renderAll();
    const fabricImage = fabricCanvas.toCanvasElement();
    combinedContext.drawImage(fabricImage, 0, 0);

    const link = document.createElement('a');
    link.href = combinedCanvas.toDataURL('image/png');
    link.download = 'visphys.png';
    link.click();
  });
  
  //WebSocketを使ってキャンバスをリアルタイムで反映
      //WebSocketの接続
      const ws = new WebSocket('wss://' + window.location.host + '/ws/<%= @token %>'); //サーバーのWebSocketエンドポイント
      
      let isWsConnected = false;
      
      document.addEventListener("DOMContentLoaded", function () {
          
          ws.onopen = () => {
              console.log('WebSocket connection established');
              isWsConnected = true;
          };
      })
      
      //受信時
      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        if (data.type === 'draw') {
          fabric.util.enlivenObjects([data.data], function(objects) {
            objects.forEach(obj => {
              fabricCanvas.add(obj);
            });
          });
        } else if (data.type === 'clear') {
          fabricCanvas.clear();
        }
      };
      
      //線が書かれた時のイベント
      fabricCanvas.on('path:created', function(event) {
        const pathData = event.path.toJSON(); //描画データをJSON形式に
        //WebSocket接続が確立されているか確認してから送信
        if (isWsConnected) {
          ws.send(JSON.stringify({ type: 'draw', data: pathData}));
        } else {
          console.warn("WebSocket connection is not open. Mesage not sent.");
        }
      });

</script>

  </div>
</body>
</html>