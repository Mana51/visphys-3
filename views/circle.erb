<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/simulation.css">
</head>


<body>
  <div class="body">
    
    <div class="simulation-area">
      
      <!-- Canvas Area for Matter.js -->
      <div id="canvas-area" style="position: relative; width: 900px; height: 600px;">
        <canvas id="matterCanvas" style="position: absolute; top: 0; left: 0; z-index: 0;" width="800" height="600"></canvas>
        <canvas id="fabricCanvas" style="position: absolute; top: 0; left: 0; z-index: 1;" width="800" height="600"></canvas>
      </div>
      
      <!-- Simulation and Editing Control Buttons -->
      <div class="play_pause">
        <button type="button" id="stopButton"></button>
        <button type="button" id="startButton" style="display:none;"></button>
      </div>
  
      <!-- Buttons for drawing on the canvas -->
      <div class="edit-buttons">
        <div><button type="button" id="drawButton"></button></div>
        <div><button type="button" id="selectButton"></button></div>
        <div><button type="button" id="clearButton"></button></div>
        <div><button type="button" id="downloadButton"></button></div>
      </div>
  
    </div>
    
    <div class="form">
      <form id="controls">
        <div class="control">
          <label for="radius">円運動の半径</label>
          <input type="number" id="radius" name="radius" min="10" value="<%= @variables ? @variables['radius'] || 100 : 100 %>">
        </div>
        <div class="control">
          <label for="speed">角速度</label>
          <input type="number" id="speed" name="speed" min="0" value="<%= @variables ? @variables['speed'] || 2 : 2 %>">
        </div>
        <button type="button" id="updateButton">アップデート</button>
      </form>
    </div>
    
    
    <form id="saveSimulationForm" method="POST" action="/saveSimulation">
      <button type="submit" class="saveButton"></button>
      <input type="text" name="title" placeholder="タイトル" required>
      <input type="hidden" name="simulation_type" value="circle"> <!-- シミュレーション種類 -->
      <input type="hidden" name="variables" id="variablesInput"> <!-- 変数をここに入れる -->
    </form>
    
    <form id="shareSimulationForm" method="POST" action="/shareSimulation">
      <button type="submit" class="shareButton"></button>
      <input type="hidden" name="simulation_type" value="circle"> 
      <input type="hidden" name="variables" id="shareVariablesInput">
    </form>

    <script>
      // 使用モジュール
      const Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Body = Matter.Body,
        Bodies = Matter.Bodies,
        Composite = Matter.Composite,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse;
        Events = Matter.Events;
    
      const engine = Engine.create();
    
      const matterCanvas = $('#matterCanvas')[0];
      const fabricCanvas = new fabric.Canvas('fabricCanvas');
    
      matterCanvas.width = 800;
      matterCanvas.height = 600;
      fabricCanvas.setWidth(800);
      fabricCanvas.setHeight(600);
    
      const render = Render.create({
        canvas: matterCanvas,
        engine: engine,
        options: {
          width: 800,
          height: 600,
          background: '#fafafa',
          wireframes: false
        }
      });
    
      const mouse = Mouse.create(render.canvas);
      const mouseConstraint = MouseConstraint.create(engine, {
        mouse: mouse,
        constraint: {
          render: { visible: false }
        }
      });
    
      Composite.add(engine.world, mouseConstraint);
      render.mouse = mouse;
    
      Render.run(render);
      const runner = Runner.create();
      Runner.run(runner, engine);
    
      const ground = Bodies.rectangle(400, 600, 800, 20, { isStatic: true });
      const leftWall = Bodies.rectangle(0, 300, 20, 600, { isStatic: true });
      const rightWall = Bodies.rectangle(800, 300, 20, 600, { isStatic: true });
      const roof = Bodies.rectangle(400, 0, 800, 20, { isStatic: true });
      Composite.add(engine.world, [ground, leftWall, rightWall, roof]);
      
      let circleBody; // 円を表す物体

      function startCircularMotion() {
        const radius = parseFloat($('#radius').val());
        const speed = parseFloat($('#speed').val());
        
        const centerX = 400;
        const centerY = 300;
    
        let angle = 0;
        
        circleBody = Bodies.circle(centerX + radius, centerY, 20, {
          restitution: 0.9,
          friction: 0.1,
        });
        Composite.add(engine.world, circleBody);
    
        Matter.Events.on(engine, 'beforeUpdate', function() {
          angle += speed * (Math.PI / 180);
          Body.setPosition(circleBody, {
            x: centerX + radius * Math.cos(angle),
            y: centerY + radius * Math.sin(angle),
          });
        });
      }
      
      $(document).ready(function() {
        // Initialize canvases
        const matterCanvas = $('#matterCanvas')[0];
        const fabricCanvas = new fabric.Canvas('fabricCanvas'); // Declare once
      
        // Set canvas dimensions
        matterCanvas.width = 800;
        matterCanvas.height = 600;
        fabricCanvas.setWidth(800);
        fabricCanvas.setHeight(600);
      
        // WebSocket connection
        const token = "<%= params[:token] %>";
        const socket = new WebSocket(`wss://${window.location.host}/ws/${token}`); // Use wss
      
        socket.onopen = function() {
          console.log("WebSocket connection established");
        };
      
        socket.onmessage = (message) => {
          const data = JSON.parse(message.data);
          if (data.type === "draw") {
            fabric.util.enlivenObjects([data.path], (objects) => {
              objects.forEach((obj) => fabricCanvas.add(obj));
            });
          } else if (data.type === "clear") {
            fabricCanvas.clear();
          }
        };
      
        // Example of sending a draw event
        function sendDrawEvent(path) {
          const drawData = {
            type: "draw",
            path: path
          };
          socket.send(JSON.stringify(drawData));
        }
      
        // Add a rectangle to the canvas as an example
        $('#addRectangle').click(function() {
          const rect = new fabric.Rect({
            left: 100,
            top: 100,
            fill: 'red',
            width: 50,
            height: 50
          });
          fabricCanvas.add(rect);
          sendDrawEvent(rect);
        });
      
        // Clear the canvas
        $('#clearCanvas').click(function() {
          fabricCanvas.clear();
          const clearData = { type: "clear" };
          socket.send(JSON.stringify(clearData));
        });
      
        // Window close handling to close WebSocket connection
        $(window).on('beforeunload', function() {
          socket.close();
        });
      
        // Hide fabric canvas initially and disable pointer events
        $('.canvas-container, #fabricCanvas, .upper-canvas').css({
          'width': '0',
          'height': '0'
        });
        $('#fabricCanvas').css('pointer-events', 'none');
      
        // Initialize variables and start circular motion
        if (<%= @variables ? 'true' : 'false' %>) {
          const savedVariables = JSON.parse(<%= @variables.to_json %>);
          $('#radius').val(savedVariables.radius || 100);
          $('#speed').val(savedVariables.speed || 2);
        }
        startCircularMotion();
      
        // Save simulation form submission
        $('#saveSimulationForm').on('submit', function(e) {
          e.preventDefault();
      
          const variables = {
            radius: $('#radius').val(),
            speed: $('#speed').val(),
          };
      
          $('#variablesInput').val(JSON.stringify(variables));
          this.submit();
        });
      });

      
      $('#shareSimulationForm').on('submit', function(e) {
        e.preventDefault();

        const variables = {
          radius: $('#radius').val(),
          speed: $('#speed').val(),
        };

        $('#shareVariablesInput').val(JSON.stringify(variables));
      
        // フォームを送信してシェアリンクを生成
        $.post('/shareSimulation', $(this).serialize(), function(data) {
            // サーバーから返されたシェアリンクを取得
            const shareLink = data.share_link;  
    
            // シェアリンクをクリップボードにコピー
            navigator.clipboard.writeText(shareLink).then(() => {
                alert('リンクがクリップボードにコピーされました');
            }).catch(err => {
                console.error('コピーに失敗しました: ', err);
            });
        }, 'json');
      });

      $('#updateButton').on('click', function() {
        Composite.remove(engine.world, circleBody);
        circleBody = null;

        Composite.add(engine.world, [ground, leftWall, rightWall, roof]);
        startCircularMotion();
      });

      $('#startButton').on('click', function() {
        Runner.run(runner, engine);
        $(this).hide();
        $('#stopButton').show();
      
        $('.canvas-container, #fabricCanvas, .upper-canvas').css({
          'width': '0',
          'height': '0'
        });
        $('#fabricCanvas').css('pointer-events', 'none');
        $('#matterCanvas').css('pointer-events', 'auto');
        $('#matterCanvas').css('z-index', 1);
        $('.edit-buttons').hide();
      
        fabricCanvas.isDrawingMode = false;
      
        render.mouse = mouse;
        mouseConstraint.mouse.element.removeEventListener("mousemove", mouseConstraint.mouse.mousemove);
        mouseConstraint.mouse.element.addEventListener("mousemove", mouseConstraint.mouse.mousemove);
      });
      
      $('#stopButton').on('click', function() {
        Runner.stop(runner);
        $(this).hide();
        $('#startButton').show();
      
        $('.canvas-container, #fabricCanvas, .upper-canvas').css({
          'width': '800px',
          'height': '600px'
        });
        $('#fabricCanvas').css('pointer-events', 'auto');
        $('#matterCanvas').css('pointer-events', 'none');
        $('#fabricCanvas').css('z-index', 1);
        $('.edit-buttons').show();
      });
      
      document.getElementById("drawButton").addEventListener("click", function () {
        fabricCanvas.isDrawingMode = true;
        fabricCanvas.freeDrawingBrush.width = 5;
        fabricCanvas.freeDrawingBrush.color = "black";
      });
      
      document.getElementById("selectButton").addEventListener("click", function () {
        fabricCanvas.isDrawingMode = false;
      });
      
      document.getElementById("clearButton").addEventListener("click", function () {
        fabricCanvas.clear();
        ws.send(JSON.stringify({type: 'clear'}));
      });
      
      document.getElementById("downloadButton").addEventListener("click", function () {
        const combinedCanvas = document.createElement('canvas');
        combinedCanvas.width = fabricCanvas.width;
        combinedCanvas.height = fabricCanvas.height;
      
        const combinedContext = combinedCanvas.getContext('2d');
        const matterContext = matterCanvas.getContext('2d');
      
        combinedContext.drawImage(matterCanvas, 0, 0);
      
        fabricCanvas.renderAll();
        const fabricImage = fabricCanvas.toCanvasElement();
        combinedContext.drawImage(fabricImage, 0, 0);
      
        const link = document.createElement('a');
        link.href = combinedCanvas.toDataURL('image/png');
        link.download = 'visphys.png';
        link.click();
      });
      
      
      //WebSocketを使ってキャンバスをリアルタイムで反映
      //WebSocketの接続
      const ws = new WebSocket('wss://' + window.location.host + '/ws/<%= @token %>'); //サーバーのWebSocketエンドポイント
      
      let isWsConnected = false;
      
      document.addEventListener("DOMContentLoaded", function () {
          
          ws.onopen = () => {
              console.log('WebSocket connection established');
              isWsConnected = true;
          };
      })
      
      //受信時
      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        if (data.type === 'draw') {
          fabric.util.enlivenObjects([data.data], function(objects) {
            objects.forEach(obj => {
              fabricCanvas.add(obj);
            });
          });
        } else if (data.type === 'clear') {
          fabricCanvas.clear();
        }
      };
      
      //線が書かれた時のイベント
      fabricCanvas.on('path:created', function(event) {
        const pathData = event.path.toJSON(); //描画データをJSON形式に
        //WebSocket接続が確立されているか確認してから送信
        if (isWsConnected) {
          ws.send(JSON.stringify({ type: 'draw', data: pathData}));
        } else {
          console.warn("WebSocket connection is not open. Mesage not sent.");
        }
      });
      
    </script>
    
  </div>
</body>
</html>