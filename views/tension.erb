<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/simulation.css">
</head>

<body>
  <div class="body">
    <div class="simulation-area">
      <div id="canvas-area" style="position: relative; width: 900px; height: 600px;">
        <canvas id="matterCanvas" style="position: absolute; top: 0; left: 0; z-index: 0;" width="800" height="600"></canvas>
        <canvas id="fabricCanvas" style="position: absolute; top: 0; left: 0; z-index: 1;" width="800" height="600"></canvas>
      </div>
      <div class="play_pause">
        <button type="button" id="stopButton"></button>
        <button type="button" id="startButton" style="display:none;"></button>
      </div>
      <div class="edit-buttons">
        <div><button type="button" id="drawButton"></button></div>
        <div><button type="button" id="selectButton"></button></div>
        <div><button type="button" id="clearButton"></button></div>
        <div><button type="button" id="downloadButton"></button></div>
      </div>
    </div>
    
    <div class="form">
      <form id="controls">
        <div class="control">
          <label for="mass">物体の質量</label>
          <input type="number" id="mass" name="mass" value="<%= @variables ? @variables['mass'] || 1 : 1 %>" min="0.1" step="0.1">
        </div>
        <div class="control">
          <label for="position">バネ・糸の位置</label>
          <select id="position">
            <option value="top" <%= @variables && @variables['position'] == 'top' ? 'selected' : '' %>>上</option>
            <option value="bottom" <%= @variables && @variables['position'] == 'bottom' ? 'selected' : '' %>>下</option>
          </select>
        </div>
        <div class="control">
          <label for="stiffness">バネの硬さ (0 ~ 1, 1＝糸)</label>
          <input type="number" id="stiffness" name="stiffness" value="<%= @variables ? @variables['stiffness'] || 0.1 : 0.1 %>" min="0.01" step="0.01">
        </div>
        <button type="button" id="updateButton">アップデート</button>
      </form>
    </div>

    <form id="saveSimulationForm" method="POST" action="/saveSimulation">
      <button type="submit" class="saveButton"></button>
      <input type="text" name="title" placeholder="タイトル" required>
      <input type="hidden" name="simulation_type" value="tension"> <!-- シミュレーション種類 -->
      <input type="hidden" name="variables" id="variablesInput"> <!-- 変数をここに入れる -->
    </form>
    
    <form id="shareSimulationForm" method="POST" action="/shareSimulation">
      <button type="submit" class="shareButton"></button>
      <input type="hidden" name="simulation_type" value="tension"> 
      <input type="hidden" name="variables" id="shareVariablesInput">
    </form>
    
    <script>
      const Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Body = Matter.Body,
        Bodies = Matter.Bodies,
        Composite = Matter.Composite,
        Constraint = Matter.Constraint,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse;

      const engine = Engine.create();
      const matterCanvas = $('#matterCanvas')[0];
      const fabricCanvas = new fabric.Canvas('fabricCanvas');

      matterCanvas.width = 800;
      matterCanvas.height = 600;
      fabricCanvas.setWidth(800);
      fabricCanvas.setHeight(600);

      const render = Render.create({
        canvas: matterCanvas,
        engine: engine,
        options: {
          width: 800,
          height: 600,
          background: '#fafafa',
          wireframes: false
        }
      });

      const mouse = Mouse.create(render.canvas);
      const mouseConstraint = MouseConstraint.create(engine, {
        mouse: mouse,
        constraint: {
          render: { visible: false }
        }
      });

      Composite.add(engine.world, mouseConstraint);
      render.mouse = mouse;

      Render.run(render);
      const runner = Runner.create();
      Runner.run(runner, engine);

      const ground = Bodies.rectangle(400, 600, 800, 20, { isStatic: true });
      Composite.add(engine.world, ground);

      let ball;
      let spring;

      function createBall(mass, position, stiffness) {
        if (ball) {
          Composite.remove(engine.world, ball);
          Composite.remove(engine.world, spring);
        }

        const ballY = position === "top" ? 100 : 500;
        ball = Bodies.circle(400, ballY, 25, {
          mass: mass,
          restitution: 0.8
        });

        Composite.add(engine.world, ball);

        const anchorY = position === "top" ? 0 : 600;
        spring = Constraint.create({
          pointA: { x: 400, y: anchorY },
          bodyB: ball,
          length: 200,
          stiffness: stiffness,
          render: {
            strokeStyle: 'black',
            lineWidth: 2
          }
        });

        Composite.add(engine.world, spring);
      }

      $('#updateButton').on('click', function () {
        const mass = parseFloat($('#mass').val());
        const position = $('#position').val();
        const stiffness = parseFloat($('#stiffness').val());
        createBall(mass, position, stiffness);
      });

      $(document).ready(function () {
        // ページの読み込み時にすべてのキャンバスとそのコンテナをゼロにする
        $('.canvas-container, #fabricCanvas, .upper-canvas').css({
            'width': '0',
            'height': '0'
        });
        $('#fabricCanvas').css('pointer-events', 'none');

        if (<%= @variables ? 'true' : 'false' %>) {
          const savedVariables = JSON.parse(<%= @variables.to_json %>);
          $('#mass').val(savedVariables.mass || 1);
          $('#position').val(savedVariables.position || 'top');
          $('#stiffness').val(savedVariables.stiffness || 0.1);

          // ボールを生成してスプリングを設定
          createBall(parseFloat(savedVariables.mass) || 1, savedVariables.position || 'top', parseFloat(savedVariables.stiffness) || 0.1);
        } else {
          // デフォルト値でボールを生成してスプリングを設定
          createBall(1, 'top', 0.1);
        }
      });

      $('#startButton').on('click', function() {
          Runner.run(runner, engine);
          $(this).hide();
          $('#stopButton').show();
      
          // Fabric.js canvas, upper-canvas とその親要素 (canvas-container) の幅と高さを0に
          $('.canvas-container, #fabricCanvas, .upper-canvas').css({
              'width': '0',
              'height': '0'
          });
          $('#fabricCanvas').css('pointer-events', 'none');
          $('#matterCanvas').css('pointer-events', 'auto');
          $('#matterCanvas').css('z-index', 1);
          $('.edit-buttons').hide();
      
          // Drawing モードを無効化
          fabricCanvas.isDrawingMode = false;
      
          // マウス制約を再追加
          render.mouse = mouse;
          mouseConstraint.mouse.element.removeEventListener("mousemove", mouseConstraint.mouse.mousemove);
          mouseConstraint.mouse.element.addEventListener("mousemove", mouseConstraint.mouse.mousemove);
      });
      
      $('#stopButton').on('click', function() {
          Runner.stop(runner);
          $(this).hide();
          $('#startButton').show();
      
          // Fabric.js canvas, upper-canvas とその親要素 (canvas-container) の幅と高さを元に戻す
          $('.canvas-container, #fabricCanvas, .upper-canvas').css({
              'width': '800px',
              'height': '600px'
          });
          $('#fabricCanvas').css('pointer-events', 'auto');
          $('#matterCanvas').css('pointer-events', 'none');
          $('#fabricCanvas').css('z-index', 1);
          $('.edit-buttons').show();
      
      });

      document.getElementById("drawButton").addEventListener("click", function () {
          fabricCanvas.isDrawingMode = true;
          fabricCanvas.freeDrawingBrush.width = 5;
          fabricCanvas.freeDrawingBrush.color = "black";
      });
      
      document.getElementById("selectButton").addEventListener("click", function () {
          fabricCanvas.isDrawingMode = false;
      });

      document.getElementById("clearButton").addEventListener("click", function () {
          fabricCanvas.clear();
          ws.send(JSON.stringify({type: 'clear'}));
      });

      document.getElementById("downloadButton").addEventListener("click", function () {
        const combinedCanvas = document.createElement('canvas');
        combinedCanvas.width = fabricCanvas.width;
        combinedCanvas.height = fabricCanvas.height;
      
        const combinedContext = combinedCanvas.getContext('2d');
        const matterContext = matterCanvas.getContext('2d');
      
        combinedContext.drawImage(matterCanvas, 0, 0);
        fabricCanvas.renderAll();
        const fabricImage = fabricCanvas.toCanvasElement();
        combinedContext.drawImage(fabricImage, 0, 0);
      
        const link = document.createElement('a');
        link.href = combinedCanvas.toDataURL('image/png');
        link.download = 'visphys.png';
        link.click();
      });

      // フォーム送信処理
      $('#saveSimulationForm').on('submit', function(e) {
        e.preventDefault();

        // ユーザーが入力した値を取得してオブジェクトにまとめる
        const variables = {
          mass: $('#mass').val(),
          position: $('#position').val(),
          stiffness: $('#stiffness').val()
        };

        // 変数オブジェクトをJSON形式に変換してhiddenフィールドに設定
        $('#variablesInput').val(JSON.stringify(variables));

        // フォームを送信
        this.submit();
      });
      
      $('#shareSimulationForm').on('submit', function(e) {
        e.preventDefault();

        // ユーザーが入力した値を取得してオブジェクトにまとめる
        const variables = {
          mass: $('#mass').val(),
          position: $('#position').val(),
          stiffness: $('#stiffness').val()
        };

        // 変数オブジェクトをJSON形式に変換してhiddenフィールドに設定
        $('#shareVariablesInput').val(JSON.stringify(variables));

        // フォームを送信してシェアリンクを生成
        $.post('/shareSimulation', $(this).serialize(), function(data) {
            // サーバーから返されたシェアリンクを取得
            const shareLink = data.share_link;  
    
            // シェアリンクをクリップボードにコピー
            navigator.clipboard.writeText(shareLink).then(() => {
                alert('リンクがクリップボードにコピーされました');
            }).catch(err => {
                console.error('コピーに失敗しました: ', err);
            });
        }, 'json');
      });
      
      //WebSocketを使ってキャンバスをリアルタイムで反映
      //WebSocketの接続
      const ws = new WebSocket('wss://' + window.location.host + '/ws/<%= @token %>'); //サーバーのWebSocketエンドポイント
      
      let isWsConnected = false;
      
      document.addEventListener("DOMContentLoaded", function () {
          
          ws.onopen = () => {
              console.log('WebSocket connection established');
              isWsConnected = true;
          };
      })
      
      //受信時
      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        if (data.type === 'draw') {
          fabric.util.enlivenObjects([data.data], function(objects) {
            objects.forEach(obj => {
              fabricCanvas.add(obj);
            });
          });
        } else if (data.type === 'clear') {
          fabricCanvas.clear();
        }
      };
      
      //線が書かれた時のイベント
      fabricCanvas.on('path:created', function(event) {
        const pathData = event.path.toJSON(); //描画データをJSON形式に
        //WebSocket接続が確立されているか確認してから送信
        if (isWsConnected) {
          ws.send(JSON.stringify({ type: 'draw', data: pathData}));
        } else {
          console.warn("WebSocket connection is not open. Mesage not sent.");
        }
      });

    </script>
  </div>
</body>
</html>